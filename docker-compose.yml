  services:

    # Serviço de Banco de Dados PostgreSQL
    db:
      container_name: ${PG_CONTAINER}
      image: postgres:16-bullseye
      environment:
        POSTGRES_PASSWORD: ${PGADMIN_PASSWORD}
        POSTGRES_DB: ${PG_DATABASE}
      volumes:
        - ./postgres-data:/var/lib/postgresql/data
      ports:
        - "${PG_PORT}:${PG_PORT}"

    # Serviço pgAdmin para gerenciar o PostgreSQL
    pgadmin:
      container_name: pg-admin
      image: dpage/pgadmin4
      environment:
        PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
        PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
      ports:
        - "8080:80"
      depends_on:
        - db

    # Serviço para a aplicação Node.js "gerenciador-estoque"
    gerenciador-estoque:
      container_name: gerenciador-estoque
      build:
        context: ./gerenciador-estoque
        args: 
          FRONTEND_REPO_URL: ${FRONTEND_REPO_URL}
        dockerfile: dockerfile.frontend
      environment:
        PG_USER: ${PG_USER}
        PG_HOST: ${PG_HOST}
        PG_DATABASE: ${PG_DATABASE}
        PG_PASSWORD: ${PG_PASSWORD}
        PG_PORT: ${PG_PORT}
        NEXT_PUBLIC_PY_BACKEND: http://localhost:${BACKEND_PORT}
      ports:
        - ${FRONTEND_PORT}:${FRONTEND_PORT}
      depends_on:
        - db

    # Serviço para a aplicação Python "API Previsoes"
    api-previsoes:
      container_name: api-previsoes
      build:
        context: ./api-previsoes
        args: 
          BACKEND_REPO_URL: ${BACKEND_REPO_URL}
        dockerfile: dockerfile.backend
      environment:
        DATABASE_URL: postgresql://${PG_USER}:${PG_PASSWORD}@${PG_CONTAINER}:${PG_PORT}/${PG_DATABASE}
      ports:
        - ${BACKEND_PORT}:${BACKEND_PORT}
      depends_on:
        - db